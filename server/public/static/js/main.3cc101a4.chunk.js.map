{"version":3,"sources":["user-symbol.js","reducer.js","event-emitter.js","App.js","serviceWorker.js","actions.js","index.js"],"names":["availableSymbols","Set","attributedSymbols","Map","getPlayerSymbol","username","found","get","size","Error","randomSymbol","Math","floor","random","delete","set","initialState","auth","token","players","grid","winner","reducer","state","action","console","log","type","payload","map","p","symbol","eventEmitter","name","handler","this","push","off","filter","h","on","data","length","forEach","Players","className","key","score","Grid","sqrt","rows","Array","fill","_","i","slice","handleClick","useCallback","j","e","preventDefault","window","onClickCell","cells","cell","cx","empty","onClick","Game","Login","handleSubmit","onSubmitLogin","onSubmit","placeholder","App","useReducer","dispatch","useEffect","visible","Boolean","location","hostname","match","logIn","logOut","setPlayers","setGrid","showWinner","hideWinner","actions","emit","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3cc101a4.chunk.js","sourcesContent":["let availableSymbols = new Set([\n  \"✘\",\n  \"✔\",\n  \"●\",\n  \"❤\",\n  \"▶\",\n  \"✩\",\n  \"✿\",\n  \"✹\",\n  \"✯\",\n  \"☁\",\n  \"☀\",\n  \"★\",\n  \"☆\",\n  \"☺\",\n  \"▲\",\n  \"♟\",\n  \"♞\",\n  \"♝\",\n  \"♜\",\n  \"♛\",\n  \"♚\",\n  \"♘\",\n  \"♗\",\n  \"♖\",\n  \"♕\",\n  \"♔\",\n  \"☜\",\n  \"☯\",\n  \"☮\",\n  \"☠\",\n  \"◀\",\n]);\n\nlet attributedSymbols = new Map();\n\nexport const getPlayerSymbol = (username) => {\n  const found = attributedSymbols.get(username);\n  if (found) return found;\n  if (availableSymbols.size === 0) throw new Error(\"No symbol available\");\n  const randomSymbol = [...availableSymbols][\n    Math.floor(Math.random() * availableSymbols.size)\n  ];\n  availableSymbols.delete(randomSymbol);\n  attributedSymbols.set(username, randomSymbol);\n  return randomSymbol;\n};\n","import { getPlayerSymbol } from \"./user-symbol\";\n\nexport const initialState = {\n  auth: {\n    username: null,\n    token: null,\n  },\n  players: [], // Player: { username: string, score: number, symbol: char }\n  grid: [], // Cell: string (username)\n  winner: null,\n};\n\n/*\nexport const initialState = {\n  auth: {\n    username: \"naholyr\",\n    token: \"TODO\",\n  },\n  players: [\n    { username: \"naholyr\", score: 33, symbol: \"X\" },\n    { username: \"John\", score: 0, symbol: \"O\" },\n  ], // Player: { username: string, score: number, symbol: char }\n  grid: [\"\", \"\", \"\", \"X\", \"\", \"\", \"O\", \"X\", \"\"], // Cell: string (username)\n  winner: null,\n};\n*/\n\nexport const reducer = (state = initialState, action) => {\n  console.log(\"reducert\", action);\n  switch (action.type) {\n    case \"AUTH\":\n      return { ...state, auth: action.payload };\n    case \"SET_PLAYERS\":\n      return {\n        ...state,\n        players: action.payload.map((p) => ({\n          ...p,\n          symbol: p.symbol || getPlayerSymbol(p.username),\n        })),\n      };\n    case \"SET_GRID\":\n      return { ...state, grid: action.payload };\n    case \"SET_WINNER\":\n      return { ...state, winner: action.payload.username };\n    default:\n      return state;\n  }\n};\n","export class EventEmitter {\n  #handlers = {};\n\n  on(name, handler) {\n    (this.#handlers[name] = this.#handlers[name] || []).push(handler);\n    return () => this.off(name, handler);\n  }\n\n  off(name, handler = null) {\n    console.log(\"off\");\n    if (!handler) {\n      delete this.#handlers[name];\n    } else if (this.#handlers[name]) {\n      this.#handlers[name] = this.#handlers[name].filter((h) => h !== handler);\n    }\n  }\n\n  once(name, handler) {\n    const off = this.on(name, (...data) => {\n      handler(...data);\n      off();\n    });\n  }\n\n  emit(name, ...data) {\n    console.log(this.#handlers);\n    if (!this.#handlers[name] || !this.#handlers[name].length) return false;\n    this.#handlers[name].forEach((handler) => handler(...data));\n    return true;\n  }\n}\n\nexport const eventEmitter = new EventEmitter();\n","import React, { useReducer, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport { reducer, initialState } from \"./reducer\";\nimport { eventEmitter } from \"./event-emitter\";\nimport cx from \"classnames\";\n\nconst Players = ({ players }) => (\n  <ul className=\"Players\">\n    {players.map((p) => (\n      <li key={p.username}>\n        <strong>{p.username}</strong>\n        <em>{p.score}</em>\n        <code>{p.symbol}</code>\n      </li>\n    ))}\n  </ul>\n);\n\nconst Grid = ({ grid }) => {\n  const size = Math.sqrt(grid.length);\n  const rows = Array(size)\n    .fill()\n    .map((_, i) => grid.slice(i * size, (i + 1) * size));\n\n  const handleClick = useCallback(\n    (i, j) => (e) => {\n      e.preventDefault();\n      const empty = !grid[i * size + j];\n      if (empty && window.onClickCell) window.onClickCell(i, j);\n    },\n    [grid, size]\n  );\n\n  return (\n    <div className=\"Grid\">\n      {rows.map((cells, i) => (\n        <div key={i} className=\"GridRow\">\n          {cells.map((cell, j) => (\n            <span\n              key={j}\n              className={cx(\"GridCell\", { empty: !cell })}\n              onClick={handleClick(i, j)}\n            >\n              {cell}\n            </span>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst Game = ({ grid, players }) => (\n  <div className=\"Game\">\n    <Players players={players} />\n    <Grid grid={grid} />\n  </div>\n);\n\nconst Login = () => {\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault();\n    if (window.onSubmitLogin) window.onSubmitLogin(e);\n  }, []);\n\n  return (\n    <form className=\"Login\" onSubmit={handleSubmit}>\n      <input type=\"text\" placeholder=\"username\" name=\"username\" />\n      <input type=\"password\" placeholder=\"password\" name=\"password\" />\n      <button>Log In</button>\n    </form>\n  );\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // React to outside dispatch\n  useEffect(() => {\n    const off = eventEmitter.on(\"action\", dispatch);\n    return off;\n  }, [dispatch]);\n\n  const { auth, grid, players, winner } = state;\n\n  return (\n    <div className=\"App\">\n      <p className={cx(\"Winner\", { visible: !!winner })}>{winner} wins!</p>\n      {auth.token ? <Game grid={grid} players={players} /> : <Login />}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const logIn = (username, token) => ({\n  type: \"AUTH\",\n  payload: { username, token },\n});\n\nexport const logOut = () => ({\n  type: \"AUTH\",\n  payload: { username: null, token: null },\n});\n\nexport const setPlayers = (players) => ({\n  type: \"SET_PLAYERS\",\n  payload: players,\n});\n\nexport const setGrid = (grid) => ({\n  type: \"SET_GRID\",\n  payload: grid,\n});\n\nexport const showWinner = (username) => ({\n  type: \"SET_WINNER\",\n  payload: { username },\n});\n\nexport const hideWinner = () => ({\n  type: \"SET_WINNER\",\n  payload: {},\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { eventEmitter } from \"./event-emitter\";\nimport * as actions from \"./actions\";\n\n// Publicly expose eventEmitter's \"action\" event\nwindow.actions = actions;\nwindow.dispatch = (action) => eventEmitter.emit(\"action\", action);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}