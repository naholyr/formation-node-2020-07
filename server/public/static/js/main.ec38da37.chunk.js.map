{"version":3,"sources":["user-symbol.js","reducer.js","event-emitter.js","App.js","serviceWorker.js","actions.js","index.js"],"names":["availableSymbols","Set","attributedSymbols","Map","getPlayerSymbol","username","found","get","size","Error","randomSymbol","Math","floor","random","delete","set","initialState","auth","token","players","grid","winner","currentPlayer","reducer","state","action","console","log","type","payload","map","p","symbol","eventEmitter","name","handler","this","push","off","filter","h","on","data","length","forEach","Players","myself","className","key","cx","current","score","Grid","sqrt","rows","Array","fill","_","i","slice","symbols","useMemo","reduce","dict","Object","assign","handleClick","useCallback","j","e","preventDefault","window","onClickCell","cells","cell","empty","onClick","Game","Login","handleSubmit","onSubmitLogin","target","elements","value","password","onSubmit","placeholder","App","useReducer","dispatch","useEffect","visible","Boolean","location","hostname","match","logIn","logOut","setPlayers","setGrid","showWinner","hideWinner","setCurrentPlayer","actions","emit","onStart","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ec38da37.chunk.js","sourcesContent":["let availableSymbols = new Set([\n  \"✘\",\n  \"✔\",\n  \"●\",\n  \"❤\",\n  \"▶\",\n  \"✩\",\n  \"✿\",\n  \"✹\",\n  \"✯\",\n  \"☁\",\n  \"☀\",\n  \"★\",\n  \"☆\",\n  \"☺\",\n  \"▲\",\n  \"♟\",\n  \"♞\",\n  \"♝\",\n  \"♜\",\n  \"♛\",\n  \"♚\",\n  \"♘\",\n  \"♗\",\n  \"♖\",\n  \"♕\",\n  \"♔\",\n  \"☜\",\n  \"☯\",\n  \"☮\",\n  \"☠\",\n  \"◀\",\n]);\n\nlet attributedSymbols = new Map();\n\nexport const getPlayerSymbol = (username) => {\n  const found = attributedSymbols.get(username);\n  if (found) return found;\n  if (availableSymbols.size === 0) throw new Error(\"No symbol available\");\n  const randomSymbol = [...availableSymbols][\n    Math.floor(Math.random() * availableSymbols.size)\n  ];\n  availableSymbols.delete(randomSymbol);\n  attributedSymbols.set(username, randomSymbol);\n  return randomSymbol;\n};\n","import { getPlayerSymbol } from \"./user-symbol\";\n\nexport const initialState = {\n  auth: {\n    username: null,\n    token: null,\n  },\n  players: [], // Player: { username: string, score: number, symbol: char }\n  grid: [], // Cell: string (username)\n  winner: null,\n  currentPlayer: null,\n};\n\n/*\nexport const initialState = {\n  auth: {\n    username: \"naholyr\",\n    token: \"TODO\",\n  },\n  players: [\n    { username: \"naholyr\", score: 33, symbol: \"X\" },\n    { username: \"John\", score: 0, symbol: \"O\" },\n  ], // Player: { username: string, score: number, symbol: char }\n  grid: [\"\", \"\", \"\", \"X\", \"\", \"\", \"O\", \"X\", \"\"], // Cell: string (username)\n  winner: null,\n};\n*/\n\nexport const reducer = (state = initialState, action) => {\n  console.log(\"reducer\", action);\n\n  switch (action.type) {\n    case \"AUTH\":\n      return { ...state, auth: action.payload };\n    case \"SET_PLAYERS\":\n      return {\n        ...state,\n        players: action.payload.players.map((p) => ({\n          ...p,\n          symbol: p.symbol || getPlayerSymbol(p.username),\n        })),\n        currentPlayer:\n          // update from action or…\n          action.payload.currentPlayer ||\n          // … use already set value or …\n          state.currentPlayer ||\n          // … initialize from list of players\n          action.payload.players[0].username,\n      };\n    case \"SET_GRID\":\n      return { ...state, grid: action.payload };\n    case \"SET_WINNER\":\n      return { ...state, winner: action.payload.username };\n    case \"SET_CURRENT_PLAYER\":\n      return { ...state, currentPlayer: action.payload.username };\n    default:\n      return state;\n  }\n};\n","export class EventEmitter {\n  #handlers = {};\n\n  on(name, handler) {\n    (this.#handlers[name] = this.#handlers[name] || []).push(handler);\n    return () => this.off(name, handler);\n  }\n\n  off(name, handler = null) {\n    console.log(\"off\");\n    if (!handler) {\n      delete this.#handlers[name];\n    } else if (this.#handlers[name]) {\n      this.#handlers[name] = this.#handlers[name].filter((h) => h !== handler);\n    }\n  }\n\n  once(name, handler) {\n    const off = this.on(name, (...data) => {\n      handler(...data);\n      off();\n    });\n  }\n\n  emit(name, ...data) {\n    console.log(this.#handlers);\n    if (!this.#handlers[name] || !this.#handlers[name].length) return false;\n    this.#handlers[name].forEach((handler) => handler(...data));\n    return true;\n  }\n}\n\nexport const eventEmitter = new EventEmitter();\n","import React, { useReducer, useEffect, useCallback, useMemo } from \"react\";\nimport \"./App.css\";\nimport { reducer, initialState } from \"./reducer\";\nimport { eventEmitter } from \"./event-emitter\";\nimport cx from \"classnames\";\n\nconst Players = ({ players, currentPlayer, myself }) => (\n  <ul className=\"Players\">\n    {players.map((p) => (\n      <li\n        key={p.username}\n        className={cx(\"Player\", {\n          current: currentPlayer === p.username,\n          myself: myself === p.username,\n        })}\n      >\n        <strong>{p.username}</strong>\n        <em>{p.score}</em>\n        <code>{p.symbol}</code>\n      </li>\n    ))}\n  </ul>\n);\n\nconst Grid = ({ grid, players }) => {\n  const size = Math.sqrt(grid.length);\n  const rows = Array(size)\n    .fill()\n    .map((_, i) => grid.slice(i * size, (i + 1) * size));\n\n  const symbols = useMemo(\n    () =>\n      players.reduce((dict, p) =>\n        Object.assign(dict, { [p.username]: p.symbol })\n      ),\n    [players]\n  );\n\n  const handleClick = useCallback(\n    (i, j) => (e) => {\n      e.preventDefault();\n      const empty = !grid[i * size + j];\n      if (empty && window.onClickCell) window.onClickCell(i, j);\n    },\n    [grid, size]\n  );\n\n  return (\n    <div className=\"Grid\">\n      {rows.map((cells, i) => (\n        <div key={i} className=\"GridRow\">\n          {cells.map((cell, j) => (\n            <span\n              key={j}\n              className={cx(\"GridCell\", { empty: !cell })}\n              onClick={handleClick(i, j)}\n            >\n              {symbols[cell] || \"ERROR\"}\n            </span>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst Game = ({ grid, players, currentPlayer, myself }) => (\n  <div className=\"Game\">\n    <Players players={players} currentPlayer={currentPlayer} myself={myself} />\n    <Grid players={players} grid={grid} />\n  </div>\n);\n\nconst Login = () => {\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault();\n    if (window.onSubmitLogin)\n      window.onSubmitLogin(\n        e.target.elements.username.value,\n        e.target.elements.password.value\n      );\n  }, []);\n\n  return (\n    <form className=\"Login\" onSubmit={handleSubmit}>\n      <input type=\"text\" placeholder=\"username\" name=\"username\" />\n      <input type=\"password\" placeholder=\"password\" name=\"password\" />\n      <button>Log In</button>\n    </form>\n  );\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  console.log(\"state\", state);\n\n  // React to outside dispatch\n  useEffect(() => {\n    const off = eventEmitter.on(\"action\", dispatch);\n    return off;\n  }, [dispatch]);\n\n  const { auth, grid, players, winner, currentPlayer } = state;\n\n  return (\n    <div className=\"App\">\n      <p className={cx(\"Winner\", { visible: !!winner })}>{winner} wins!</p>\n      {auth.token ? (\n        <Game\n          grid={grid}\n          players={players}\n          currentPlayer={currentPlayer}\n          myself={auth.username}\n        />\n      ) : (\n        <Login />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const logIn = (username, token) => ({\n  type: \"AUTH\",\n  payload: { username, token },\n});\n\nexport const logOut = () => ({\n  type: \"AUTH\",\n  payload: { username: null, token: null },\n});\n\nexport const setPlayers = (players, currentPlayer) => ({\n  type: \"SET_PLAYERS\",\n  payload: { players, currentPlayer },\n});\n\nexport const setGrid = (grid) => ({\n  type: \"SET_GRID\",\n  payload: grid,\n});\n\nexport const showWinner = (username) => ({\n  type: \"SET_WINNER\",\n  payload: { username },\n});\n\nexport const hideWinner = () => ({\n  type: \"SET_WINNER\",\n  payload: {},\n});\n\nexport const setCurrentPlayer = (username) => ({\n  type: \"SET_CURRENT_PLAYER\",\n  payload: { username },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { eventEmitter } from \"./event-emitter\";\nimport * as actions from \"./actions\";\n\n// Publicly expose eventEmitter's \"action\" event\nwindow.actions = actions;\nwindow.dispatch = (action) => eventEmitter.emit(\"action\", action);\n\n// Execute a global \"onStart\" method if available\nif (window.onStart) window.onStart();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}